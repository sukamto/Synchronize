/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.nsn.gui;

import java.io.PrintStream;
import org.netbeans.api.settings.ConvertAsProperties;
import org.nsn.erroroutputstream.ErrorOutputStream;
import org.nsn.globalcontextservice.GlobalInterface;
import org.nsn.importfiles.ImportThreading;
import org.nsn.importfiles.ScheduledRunner;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Lookup;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//org.nsn.gui//Event_Log//EN",
autostore = false)
@TopComponent.Description(preferredID = "Event_LogTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "editor", openAtStartup = true)
@ActionID(category = "Window", id = "org.nsn.gui.Event_LogTopComponent")
@ActionReference(path = "Menu/Window" /*
 * , position = 333
 */)
@TopComponent.OpenActionRegistration(displayName = "#CTL_Event_LogAction",
preferredID = "Event_LogTopComponent")
@Messages({
    "CTL_Event_LogAction=Event_Log",
    "CTL_Event_LogTopComponent=Event_Log Window",
    "HINT_Event_LogTopComponent=This is a Event_Log window"
})
public final class Event_LogTopComponent extends TopComponent {

    private ScheduledRunner runner = null;

    public Event_LogTopComponent() {
        initComponents();
        setName(Bundle.CTL_Event_LogTopComponent());
        setToolTipText(Bundle.HINT_Event_LogTopComponent());
        errorToTextArea();
    }

    private void errorToTextArea() {
        ErrorOutputStream taos = new ErrorOutputStream(jTextArea1, 60);
        PrintStream ps = new PrintStream(taos);
        System.setOut(ps);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        jTextArea1.setBackground(new java.awt.Color(204, 204, 204));
        jTextArea1.setColumns(20);
        jTextArea1.setEditable(false);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
//        while (isConnected()) {
//            try {
//                wait(2000);
////                Thread.sleep(2000);
//            } catch (InterruptedException ex) {
//                System.err.println(ex);
//            }
//        }
        if (runner == null) {
            runner = new ScheduledRunner();
            runner.startScheduler();
        }
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    private boolean isConnected() {
        GlobalInterface gi = Lookup.getDefault().lookup(GlobalInterface.class);
        return gi.getDbConnection() != null;
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
